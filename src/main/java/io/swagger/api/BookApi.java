/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Book;
import io.swagger.model.BookID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-05T05:57:49.407Z")

@Api(value = "book", description = "the book API")
public interface BookApi {

    @ApiOperation(value = "delete booking", nickname = "deleteBooking", notes = "delete reservation ", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 403, message = "forbidden"),
        @ApiResponse(code = 404, message = "not found") })
    @RequestMapping(value = "/book",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBooking(@NotNull @Min(0) @Max(100) @ApiParam(value = "identifier of booking", required = true) @Valid @RequestParam(value = "bookID", required = true) Integer bookID);


    @ApiOperation(value = "get bookings", nickname = "getBookings", notes = "get list of bookings or only one book by specifing bookId ", response = Book.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 403, message = "forbidden") })
    @RequestMapping(value = "/book",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> getBookings(@Min(0) @Max(100) @ApiParam(value = "optional identifier of booking") @Valid @RequestParam(value = "bookID", required = false) Integer bookID);


    @ApiOperation(value = "create or update booking", nickname = "upsertBooking", notes = "Update reservation or create new ", response = Object.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Object.class),
        @ApiResponse(code = 201, message = "search results matching criteria", response = BookID.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 403, message = "forbidden") })
    @RequestMapping(value = "/book",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Object> upsertBooking();

}
